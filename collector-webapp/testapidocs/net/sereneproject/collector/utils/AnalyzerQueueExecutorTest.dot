#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.1 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// net.sereneproject.collector.utils.AnalyzerQueueExecutorTest
	c133 [label=<<table title="net.sereneproject.collector.utils.AnalyzerQueueExecutorTest" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./AnalyzerQueueExecutorTest.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AnalyzerQueueExecutorTest </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AnalyzerQueueExecutorTest() </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + messagesDispatched() </td></tr>
<tr><td align="left" balign="left"> + tearDown() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// net.sereneproject.collector.utils.AnalyzerQueueExecutorTest NAVASSOC java.util.concurrent.BlockingQueue<E>
	c133:p -> c149:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// net.sereneproject.collector.utils.AnalyzerQueueExecutorTest NAVASSOC net.sereneproject.collector.utils.AnalyzerQueueExecutor
	c133:p -> c151:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// net.sereneproject.collector.utils.AnalyzerQueueExecutorTest NAVASSOC net.sereneproject.collector.service.AnalyzerService
	c133:p -> c153:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// net.sereneproject.collector.utils.AnalyzerQueueExecutorTest NAVASSOC java.lang.Thread
	c133:p -> c162:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// java.lang.Thread
	c162 [label=<<table title="java.lang.Thread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Thread.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Thread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MIN_PRIORITY : int </td></tr>
<tr><td align="left" balign="left"> + NORM_PRIORITY : int </td></tr>
<tr><td align="left" balign="left"> + MAX_PRIORITY : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Thread() </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : Runnable) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : ThreadGroup, arg1 : Runnable) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : ThreadGroup, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : Runnable, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : ThreadGroup, arg1 : Runnable, arg2 : String) </td></tr>
<tr><td align="left" balign="left"> + Thread(arg0 : ThreadGroup, arg1 : Runnable, arg2 : String, arg3 : long) </td></tr>
<tr><td align="left" balign="left"> + currentThread() : Thread </td></tr>
<tr><td align="left" balign="left"> + yield() </td></tr>
<tr><td align="left" balign="left"> + sleep(arg0 : long) </td></tr>
<tr><td align="left" balign="left"> + sleep(arg0 : long, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> # clone() : Object </td></tr>
<tr><td align="left" balign="left"> + start() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
<tr><td align="left" balign="left"> + stop(arg0 : Throwable) </td></tr>
<tr><td align="left" balign="left"> + interrupt() </td></tr>
<tr><td align="left" balign="left"> + interrupted() : boolean </td></tr>
<tr><td align="left" balign="left"> + isInterrupted() : boolean </td></tr>
<tr><td align="left" balign="left"> + destroy() </td></tr>
<tr><td align="left" balign="left"> + isAlive() : boolean </td></tr>
<tr><td align="left" balign="left"> + suspend() </td></tr>
<tr><td align="left" balign="left"> + resume() </td></tr>
<tr><td align="left" balign="left"> + setPriority(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getPriority() : int </td></tr>
<tr><td align="left" balign="left"> + setName(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getThreadGroup() : ThreadGroup </td></tr>
<tr><td align="left" balign="left"> + activeCount() : int </td></tr>
<tr><td align="left" balign="left"> + enumerate(arg0 : Thread[]) : int </td></tr>
<tr><td align="left" balign="left"> + countStackFrames() : int </td></tr>
<tr><td align="left" balign="left"> + join(arg0 : long) </td></tr>
<tr><td align="left" balign="left"> + join(arg0 : long, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + join() </td></tr>
<tr><td align="left" balign="left"> + dumpStack() </td></tr>
<tr><td align="left" balign="left"> + setDaemon(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isDaemon() : boolean </td></tr>
<tr><td align="left" balign="left"> + checkAccess() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getContextClassLoader() : ClassLoader </td></tr>
<tr><td align="left" balign="left"> + setContextClassLoader(arg0 : ClassLoader) </td></tr>
<tr><td align="left" balign="left"> + holdsLock(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + getStackTrace() : StackTraceElement[] </td></tr>
<tr><td align="left" balign="left"> + getAllStackTraces() : Map&lt;Thread, StackTraceElement&gt; </td></tr>
<tr><td align="left" balign="left"> + getId() : long </td></tr>
<tr><td align="left" balign="left"> + getState() : Thread.State </td></tr>
<tr><td align="left" balign="left"> + setDefaultUncaughtExceptionHandler(arg0 : Thread.UncaughtExceptionHandler) </td></tr>
<tr><td align="left" balign="left"> + getDefaultUncaughtExceptionHandler() : Thread.UncaughtExceptionHandler </td></tr>
<tr><td align="left" balign="left"> + getUncaughtExceptionHandler() : Thread.UncaughtExceptionHandler </td></tr>
<tr><td align="left" balign="left"> + setUncaughtExceptionHandler(arg0 : Thread.UncaughtExceptionHandler) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.util.concurrent.BlockingQueue<E>
	c149 [label=<<table title="java.util.concurrent.BlockingQueue" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/concurrent/BlockingQueue.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> BlockingQueue&lt;E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + add(arg0 : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + offer(arg0 : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + put(arg0 : E) </td></tr>
<tr><td align="left" balign="left"> + offer(arg0 : E, arg1 : long, arg2 : TimeUnit) : boolean </td></tr>
<tr><td align="left" balign="left"> + take() : E </td></tr>
<tr><td align="left" balign="left"> + poll(arg0 : long, arg1 : TimeUnit) : E </td></tr>
<tr><td align="left" balign="left"> + remainingCapacity() : int </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + drainTo(arg0 : Collection&lt;?&gt;) : int </td></tr>
<tr><td align="left" balign="left"> + drainTo(arg0 : Collection&lt;?&gt;, arg1 : int) : int </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// net.sereneproject.collector.utils.AnalyzerQueueExecutor
	c151 [label=<<table title="net.sereneproject.collector.utils.AnalyzerQueueExecutor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/net/sereneproject/collector/utils/AnalyzerQueueExecutor.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AnalyzerQueueExecutor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AnalyzerQueueExecutor(arg0 : AnalyzerService) </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// net.sereneproject.collector.service.AnalyzerService
	c153 [label=<<table title="net.sereneproject.collector.service.AnalyzerService" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/net/sereneproject/collector/service/AnalyzerService.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> AnalyzerService </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + analyze(arg0 : ProbeValueDateDto) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

