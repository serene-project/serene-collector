#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.1 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// net.sereneproject.collector.utils.MessageQueueFactoryBean
	c318 [label=<<table title="net.sereneproject.collector.utils.MessageQueueFactoryBean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./MessageQueueFactoryBean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MessageQueueFactoryBean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MessageQueueFactoryBean(queueName : String) </td></tr>
<tr><td align="left" balign="left"> + getObject() : MessageQueue </td></tr>
<tr><td align="left" balign="left"> + getObjectType() : Class&lt;MessageQueue&gt; </td></tr>
<tr><td align="left" balign="left"> + isSingleton() : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//net.sereneproject.collector.utils.MessageQueueFactoryBean implements org.springframework.beans.factory.FactoryBean<T>
	c346:p -> c318:p [dir=back,arrowtail=empty,style=dashed];
	// net.sereneproject.collector.utils.MessageQueueFactoryBean NAVASSOC java.lang.String
	c318:p -> c351:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// net.sereneproject.collector.utils.MessageQueueFactoryBean DEPEND java.lang.Class<T>
	c318:p -> c369:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// net.sereneproject.collector.utils.MessageQueueFactoryBean DEPEND com.npstrandberg.simplemq.MessageQueue
	c318:p -> c370:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// org.springframework.beans.factory.FactoryBean<T>
	c346 [label=<<table title="org.springframework.beans.factory.FactoryBean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/org/springframework/beans/factory/FactoryBean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> FactoryBean&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getObject() : T </td></tr>
<tr><td align="left" balign="left"> + getObjectType() : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + isSingleton() : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// com.npstrandberg.simplemq.MessageQueue
	c370 [label=<<table title="com.npstrandberg.simplemq.MessageQueue" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/com/npstrandberg/simplemq/MessageQueue.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> MessageQueue </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + send(arg0 : MessageInput) : boolean </td></tr>
<tr><td align="left" balign="left"> + send(arg0 : List&lt;MessageInput&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + receive() : Message </td></tr>
<tr><td align="left" balign="left"> + receive(arg0 : int) : List&lt;Message&gt; </td></tr>
<tr><td align="left" balign="left"> + receiveAndDelete() : Message </td></tr>
<tr><td align="left" balign="left"> + receiveAndDelete(arg0 : int) : List&lt;Message&gt; </td></tr>
<tr><td align="left" balign="left"> + delete(arg0 : Message) : boolean </td></tr>
<tr><td align="left" balign="left"> + delete(arg0 : List&lt;Message&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMessageQueueConfig() : MessageQueueConfig </td></tr>
<tr><td align="left" balign="left"> + deleted() : boolean </td></tr>
<tr><td align="left" balign="left"> + messageCount() : long </td></tr>
<tr><td align="left" balign="left"> + isPersistent() : boolean </td></tr>
<tr><td align="left" balign="left"> + deleteQueue() </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.lang.Class<T>
	c369 [label=<<table title="java.lang.Class" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Class.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Class&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + forName(arg0 : String) : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + forName(arg0 : String, arg1 : boolean, arg2 : ClassLoader) : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + newInstance() : T </td></tr>
<tr><td align="left" balign="left"> + isInstance(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAssignableFrom(arg0 : Class&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + isInterface() : boolean </td></tr>
<tr><td align="left" balign="left"> + isArray() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPrimitive() : boolean </td></tr>
<tr><td align="left" balign="left"> + isAnnotation() : boolean </td></tr>
<tr><td align="left" balign="left"> + isSynthetic() : boolean </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getClassLoader() : ClassLoader </td></tr>
<tr><td align="left" balign="left"> + getTypeParameters() : TypeVariable&lt;Class&lt;T&gt;&gt;[] </td></tr>
<tr><td align="left" balign="left"> + getSuperclass() : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getGenericSuperclass() : Type </td></tr>
<tr><td align="left" balign="left"> + getPackage() : Package </td></tr>
<tr><td align="left" balign="left"> + getInterfaces() : Class&lt;?&gt;[] </td></tr>
<tr><td align="left" balign="left"> + getGenericInterfaces() : Type[] </td></tr>
<tr><td align="left" balign="left"> + getComponentType() : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getModifiers() : int </td></tr>
<tr><td align="left" balign="left"> + getSigners() : Object[] </td></tr>
<tr><td align="left" balign="left"> + getEnclosingMethod() : Method </td></tr>
<tr><td align="left" balign="left"> + getEnclosingConstructor() : Constructor&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getDeclaringClass() : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getEnclosingClass() : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getSimpleName() : String </td></tr>
<tr><td align="left" balign="left"> + getCanonicalName() : String </td></tr>
<tr><td align="left" balign="left"> + isAnonymousClass() : boolean </td></tr>
<tr><td align="left" balign="left"> + isLocalClass() : boolean </td></tr>
<tr><td align="left" balign="left"> + isMemberClass() : boolean </td></tr>
<tr><td align="left" balign="left"> + getClasses() : Class&lt;?&gt;[] </td></tr>
<tr><td align="left" balign="left"> + getFields() : Field[] </td></tr>
<tr><td align="left" balign="left"> + getMethods() : Method[] </td></tr>
<tr><td align="left" balign="left"> + getConstructors() : Constructor&lt;?&gt;[] </td></tr>
<tr><td align="left" balign="left"> + getField(arg0 : String) : Field </td></tr>
<tr><td align="left" balign="left"> + getMethod(arg0 : String, arg1 : Class&lt;?&gt;[]) : Method </td></tr>
<tr><td align="left" balign="left"> + getConstructor(arg0 : Class&lt;?&gt;[]) : Constructor&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + getDeclaredClasses() : Class&lt;?&gt;[] </td></tr>
<tr><td align="left" balign="left"> + getDeclaredFields() : Field[] </td></tr>
<tr><td align="left" balign="left"> + getDeclaredMethods() : Method[] </td></tr>
<tr><td align="left" balign="left"> + getDeclaredConstructors() : Constructor&lt;?&gt;[] </td></tr>
<tr><td align="left" balign="left"> + getDeclaredField(arg0 : String) : Field </td></tr>
<tr><td align="left" balign="left"> + getDeclaredMethod(arg0 : String, arg1 : Class&lt;?&gt;[]) : Method </td></tr>
<tr><td align="left" balign="left"> + getDeclaredConstructor(arg0 : Class&lt;?&gt;[]) : Constructor&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + getResourceAsStream(arg0 : String) : InputStream </td></tr>
<tr><td align="left" balign="left"> + getResource(arg0 : String) : URL </td></tr>
<tr><td align="left" balign="left"> + getProtectionDomain() : ProtectionDomain </td></tr>
<tr><td align="left" balign="left"> + desiredAssertionStatus() : boolean </td></tr>
<tr><td align="left" balign="left"> + isEnum() : boolean </td></tr>
<tr><td align="left" balign="left"> + getEnumConstants() : T[] </td></tr>
<tr><td align="left" balign="left"> + cast(arg0 : Object) : T </td></tr>
<tr><td align="left" balign="left"> + asSubclass(arg0 : Class&lt;U&gt;) : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getAnnotation(arg0 : Class&lt;A&gt;) : A </td></tr>
<tr><td align="left" balign="left"> + isAnnotationPresent(arg0 : Class&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + getAnnotations() : Annotation[] </td></tr>
<tr><td align="left" balign="left"> + getDeclaredAnnotations() : Annotation[] </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.lang.String
	c351 [label=<<table title="java.lang.String" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/String.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + CASE_INSENSITIVE_ORDER : Comparator&lt;String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + String() </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : char[]) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : char[], arg1 : int, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : int[], arg1 : int, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : byte[], arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : byte[], arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : byte[], arg1 : int, arg2 : int, arg3 : String) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : byte[], arg1 : int, arg2 : int, arg3 : Charset) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : byte[], arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : byte[], arg1 : Charset) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : byte[], arg1 : int, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : byte[]) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : StringBuffer) </td></tr>
<tr><td align="left" balign="left"> + String(arg0 : StringBuilder) </td></tr>
<tr><td align="left" balign="left"> + length() : int </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + charAt(arg0 : int) : char </td></tr>
<tr><td align="left" balign="left"> + codePointAt(arg0 : int) : int </td></tr>
<tr><td align="left" balign="left"> + codePointBefore(arg0 : int) : int </td></tr>
<tr><td align="left" balign="left"> + codePointCount(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + offsetByCodePoints(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + getChars(arg0 : int, arg1 : int, arg2 : char[], arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + getBytes(arg0 : int, arg1 : int, arg2 : byte[], arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + getBytes(arg0 : String) : byte[] </td></tr>
<tr><td align="left" balign="left"> + getBytes(arg0 : Charset) : byte[] </td></tr>
<tr><td align="left" balign="left"> + getBytes() : byte[] </td></tr>
<tr><td align="left" balign="left"> + equals(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + contentEquals(arg0 : StringBuffer) : boolean </td></tr>
<tr><td align="left" balign="left"> + contentEquals(arg0 : CharSequence) : boolean </td></tr>
<tr><td align="left" balign="left"> + equalsIgnoreCase(arg0 : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + compareTo(arg0 : String) : int </td></tr>
<tr><td align="left" balign="left"> + compareToIgnoreCase(arg0 : String) : int </td></tr>
<tr><td align="left" balign="left"> + regionMatches(arg0 : int, arg1 : String, arg2 : int, arg3 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + regionMatches(arg0 : boolean, arg1 : int, arg2 : String, arg3 : int, arg4 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + startsWith(arg0 : String, arg1 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + startsWith(arg0 : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + endsWith(arg0 : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + indexOf(arg0 : int) : int </td></tr>
<tr><td align="left" balign="left"> + indexOf(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + lastIndexOf(arg0 : int) : int </td></tr>
<tr><td align="left" balign="left"> + lastIndexOf(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + indexOf(arg0 : String) : int </td></tr>
<tr><td align="left" balign="left"> + indexOf(arg0 : String, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + lastIndexOf(arg0 : String) : int </td></tr>
<tr><td align="left" balign="left"> + lastIndexOf(arg0 : String, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + substring(arg0 : int) : String </td></tr>
<tr><td align="left" balign="left"> + substring(arg0 : int, arg1 : int) : String </td></tr>
<tr><td align="left" balign="left"> + subSequence(arg0 : int, arg1 : int) : CharSequence </td></tr>
<tr><td align="left" balign="left"> + concat(arg0 : String) : String </td></tr>
<tr><td align="left" balign="left"> + replace(arg0 : char, arg1 : char) : String </td></tr>
<tr><td align="left" balign="left"> + matches(arg0 : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : CharSequence) : boolean </td></tr>
<tr><td align="left" balign="left"> + replaceFirst(arg0 : String, arg1 : String) : String </td></tr>
<tr><td align="left" balign="left"> + replaceAll(arg0 : String, arg1 : String) : String </td></tr>
<tr><td align="left" balign="left"> + replace(arg0 : CharSequence, arg1 : CharSequence) : String </td></tr>
<tr><td align="left" balign="left"> + split(arg0 : String, arg1 : int) : String[] </td></tr>
<tr><td align="left" balign="left"> + split(arg0 : String) : String[] </td></tr>
<tr><td align="left" balign="left"> + toLowerCase(arg0 : Locale) : String </td></tr>
<tr><td align="left" balign="left"> + toLowerCase() : String </td></tr>
<tr><td align="left" balign="left"> + toUpperCase(arg0 : Locale) : String </td></tr>
<tr><td align="left" balign="left"> + toUpperCase() : String </td></tr>
<tr><td align="left" balign="left"> + trim() : String </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + toCharArray() : char[] </td></tr>
<tr><td align="left" balign="left"> + format(arg0 : String, arg1 : Object[]) : String </td></tr>
<tr><td align="left" balign="left"> + format(arg0 : Locale, arg1 : String, arg2 : Object[]) : String </td></tr>
<tr><td align="left" balign="left"> + valueOf(arg0 : Object) : String </td></tr>
<tr><td align="left" balign="left"> + valueOf(arg0 : char[]) : String </td></tr>
<tr><td align="left" balign="left"> + valueOf(arg0 : char[], arg1 : int, arg2 : int) : String </td></tr>
<tr><td align="left" balign="left"> + copyValueOf(arg0 : char[], arg1 : int, arg2 : int) : String </td></tr>
<tr><td align="left" balign="left"> + copyValueOf(arg0 : char[]) : String </td></tr>
<tr><td align="left" balign="left"> + valueOf(arg0 : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + valueOf(arg0 : char) : String </td></tr>
<tr><td align="left" balign="left"> + valueOf(arg0 : int) : String </td></tr>
<tr><td align="left" balign="left"> + valueOf(arg0 : long) : String </td></tr>
<tr><td align="left" balign="left"> + valueOf(arg0 : float) : String </td></tr>
<tr><td align="left" balign="left"> + valueOf(arg0 : double) : String </td></tr>
<tr><td align="left" balign="left"> + intern() : String </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

